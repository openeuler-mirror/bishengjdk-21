//
// Copyright (c) 2019, 2021, Oracle and/or its affiliates. All rights reserved.
// Copyright (c) 2021, 2023, Loongson Technology. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License version 2 only, as
// published by the Free Software Foundation.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// You should have received a copy of the GNU General Public License version
// 2 along with this work; if not, write to the Free Software Foundation,
// Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
//
// Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
// or visit www.oracle.com if you need additional information or have any
// questions.
//

source_hpp %{

#include "gc/shared/gc_globals.hpp"
#include "gc/x/c2/xBarrierSetC2.hpp"
#include "gc/x/xThreadLocalData.hpp"

%}

source %{

static void x_load_barrier(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register ref, Register tmp, uint8_t barrier_data) {
  if (barrier_data == XLoadBarrierElided) {
    return;
  }
  XLoadBarrierStubC2* const stub = XLoadBarrierStubC2::create(node, ref_addr, ref, tmp, barrier_data);
  __ ld_d(tmp, Address(TREG, XThreadLocalData::address_bad_mask_offset()));
  __ andr(tmp, tmp, ref);
  __ bnez(tmp, *stub->entry());
  __ bind(*stub->continuation());
}

static void x_load_barrier_slow_path(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register ref, Register tmp) {
  XLoadBarrierStubC2* const stub = XLoadBarrierStubC2::create(node, ref_addr, ref, tmp, XLoadBarrierStrong);
  __ b(*stub->entry());
  __ bind(*stub->continuation());
}

static void x_compare_and_swap(MacroAssembler& _masm, const MachNode* node,
                               Register res, Register mem, Register oldval, Register newval,
                               Register tmp, bool weak, bool acquire) {
  // z-specific load barrier requires strong CAS operations.
  // Weak CAS operations are thus only emitted if the barrier is elided.
  Address addr(mem);
  if (node->barrier_data() == XLoadBarrierElided) {
    __ cmpxchg(addr, oldval, newval, tmp, false /* retold */, acquire /* acquire */,
               weak /* weak */, false /* exchange */);
    __ move(res, tmp);
  } else {
    __ move(tmp, oldval);
    __ cmpxchg(addr, tmp, newval, AT, true /* retold */, acquire /* acquire */,
               false /* weak */, false /* exchange */);
    __ move(res, AT);

    Label good;
    __ ld_d(AT, Address(TREG, XThreadLocalData::address_bad_mask_offset()));
    __ andr(AT, AT, tmp);
    __ beqz(AT, good);
    x_load_barrier_slow_path(_masm, node, addr, tmp, res /* used as tmp */);
    __ cmpxchg(addr, oldval, newval, tmp, false /* retold */, acquire /* acquire */, weak /* weak */, false /* exchange */);
    __ move(res, tmp);
    __ bind(good);
  }
}

static void x_compare_and_exchange(MacroAssembler& _masm, const MachNode* node,
                                   Register res, Register mem, Register oldval, Register newval, Register tmp,
                                   bool weak, bool acquire) {
  // z-specific load barrier requires strong CAS operations.
  // Weak CAS operations are thus only emitted if the barrier is elided.
  Address addr(mem);
  __ cmpxchg(addr, oldval, newval, res, false /* retold */, acquire /* barrier */,
             weak && node->barrier_data() == XLoadBarrierElided /* weak */, true /* exchange */);
  if (node->barrier_data() != XLoadBarrierElided) {
    Label good;
    __ ld_d(tmp, Address(TREG, XThreadLocalData::address_bad_mask_offset()));
    __ andr(tmp, tmp, res);
    __ beqz(tmp, good);
    x_load_barrier_slow_path(_masm, node, addr, res /* ref */, tmp);
    __ cmpxchg(addr, oldval, newval, res, false /* retold */, acquire /* barrier */, weak /* weak */, true /* exchange */);
    __ bind(good);
  }
}

%}

// Load Pointer
instruct xLoadP(mRegP dst, memory mem, mRegP tmp)
%{
  match(Set dst (LoadP mem));
  effect(TEMP_DEF dst, TEMP tmp);
  ins_cost(125);//must be equal loadP in loongarch_64.ad

  predicate(UseZGC && !ZGenerational && n->as_Load()->barrier_data() != 0);

  format %{ "xLoadP  $dst, $mem" %}

  ins_encode %{
    Address ref_addr = Address(as_Register($mem$$base), as_Register($mem$$index), Address::no_scale, $mem$$disp);
    __ block_comment("xLoadP");
    __ ld_d($dst$$Register, ref_addr);
    x_load_barrier(_masm, this, ref_addr, $dst$$Register, $tmp$$Register, barrier_data());
  %}

  ins_pipe(pipe_slow);
%}

instruct xCompareAndSwapP(mRegI res, mRegP mem, mRegP oldval, mRegP newval, mRegP tmp) %{
  match(Set res (CompareAndSwapP mem (Binary oldval newval)));
  effect(TEMP_DEF res, TEMP tmp);

  predicate((UseZGC && !ZGenerational && n->as_LoadStore()->barrier_data() == XLoadBarrierStrong)
            && (((CompareAndSwapNode*)n)->order() != MemNode::acquire && ((CompareAndSwapNode*) n)->order() != MemNode::seqcst));
  ins_cost(3 * MEMORY_REF_COST);//must be equal compareAndSwapP in loongarch_64.ad

  format %{ "CMPXCHG $res, $mem, $oldval, $newval; as bool; ptr" %}
  ins_encode %{
    __ block_comment("xCompareAndSwapP");
    x_compare_and_swap(_masm, this,
                       $res$$Register, $mem$$Register, $oldval$$Register, $newval$$Register,
                       $tmp$$Register, false /* weak */, false /* acquire */);
  %}

  ins_pipe(pipe_slow);
%}

instruct xCompareAndSwapP_acq(mRegI res, mRegP mem, mRegP oldval, mRegP newval, mRegP tmp) %{
  match(Set res (CompareAndSwapP mem (Binary oldval newval)));
  effect(TEMP_DEF res, TEMP tmp);

  predicate((UseZGC && !ZGenerational && n->as_LoadStore()->barrier_data() == XLoadBarrierStrong));
  ins_cost(4 * MEMORY_REF_COST);//must be larger than xCompareAndSwapP

  format %{ "CMPXCHG acq $res, $mem, $oldval, $newval; as bool; ptr" %}
  ins_encode %{
    __ block_comment("xCompareAndSwapP_acq");
    x_compare_and_swap(_masm, this,
                       $res$$Register, $mem$$Register, $oldval$$Register, $newval$$Register,
                       $tmp$$Register, false /* weak */, true /* acquire */);
  %}

  ins_pipe(pipe_slow);
%}

instruct xCompareAndSwapPWeak(mRegI res, mRegP mem, mRegP oldval, mRegP newval, mRegP tmp) %{
  match(Set res (WeakCompareAndSwapP mem (Binary oldval newval)));
  effect(TEMP_DEF res, TEMP tmp);

  predicate((UseZGC && !ZGenerational && n->as_LoadStore()->barrier_data() == XLoadBarrierStrong)
            && ((CompareAndSwapNode*)n)->order() != MemNode::acquire && ((CompareAndSwapNode*) n)->order() != MemNode::seqcst);

  ins_cost(MEMORY_REF_COST);//must be equal weakCompareAndSwapP in loongarch_64.ad

  format %{ "weak CMPXCHG $res, $mem, $oldval, $newval; as bool; ptr" %}
  ins_encode %{
    __ block_comment("xCompareAndSwapPWeak");
    x_compare_and_swap(_masm, this,
                       $res$$Register, $mem$$Register, $oldval$$Register, $newval$$Register,
                       $tmp$$Register, true /* weak */, false /* acquire */);
  %}

  ins_pipe(pipe_slow);
%}

instruct xCompareAndSwapPWeak_acq(mRegI res, mRegP mem, mRegP oldval, mRegP newval, mRegP tmp) %{
  match(Set res (WeakCompareAndSwapP mem (Binary oldval newval)));
  effect(TEMP_DEF res, TEMP tmp);

  predicate((UseZGC && !ZGenerational && n->as_LoadStore()->barrier_data() == XLoadBarrierStrong));
  ins_cost(2* MEMORY_REF_COST);//must be equal weakCompareAndSwapP_acq in loongarch_64.ad

  format %{ "weak CMPXCHG acq $res, $mem, $oldval, $newval; as bool; ptr" %}
  ins_encode %{
    __ block_comment("xCompareAndSwapPWeak_acq");
    x_compare_and_swap(_masm, this,
                       $res$$Register, $mem$$Register, $oldval$$Register, $newval$$Register,
                       $tmp$$Register, true /* weak */, true /* acquire */);
  %}

  ins_pipe(pipe_slow);
%}

instruct xCompareAndExchangeP(mRegP res, mRegP mem, mRegP oldval, mRegP newval, mRegP tmp) %{
  match(Set res (CompareAndExchangeP mem (Binary oldval newval)));
  effect(TEMP_DEF res, TEMP tmp);
  ins_cost(2* MEMORY_REF_COST);//must be equal compareAndExchangeP in loongarch_64.ad

  predicate((UseZGC && !ZGenerational && n->as_LoadStore()->barrier_data() == XLoadBarrierStrong)
            && (
              ((CompareAndSwapNode*)n)->order() != MemNode::acquire
              && ((CompareAndSwapNode*)n)->order() != MemNode::seqcst
            ));

  format %{ "CMPXCHG $res, $mem, $oldval, $newval; as ptr; ptr" %}
  ins_encode %{
    __ block_comment("xCompareAndExchangeP");
    x_compare_and_exchange(_masm, this,
                           $res$$Register, $mem$$Register, $oldval$$Register, $newval$$Register, $tmp$$Register,
                           false /* weak */, false /* acquire */);
  %}

  ins_pipe(pipe_slow);
%}

instruct xCompareAndExchangeP_acq(mRegP res, mRegP mem, mRegP oldval, mRegP newval, mRegP tmp) %{
  match(Set res (CompareAndExchangeP mem (Binary oldval newval)));
  effect(TEMP_DEF res, TEMP tmp);

  predicate((UseZGC && !ZGenerational && n->as_LoadStore()->barrier_data() == XLoadBarrierStrong)
            && (
              ((CompareAndSwapNode*)n)->order() == MemNode::acquire
              || ((CompareAndSwapNode*)n)->order() == MemNode::seqcst
            ));

  format %{ "CMPXCHG acq $res, $mem, $oldval, $newval; as ptr; ptr" %}
  ins_encode %{
    __ block_comment("xCompareAndExchangeP_acq");
    x_compare_and_exchange(_masm, this,
                           $res$$Register, $mem$$Register, $oldval$$Register, $newval$$Register, $tmp$$Register,
                           false /* weak */, true /* acquire */);
  %}

  ins_pipe(pipe_slow);
%}

instruct xGetAndSetP(mRegP mem, mRegP newv, mRegP prev, mRegP tmp) %{
  match(Set prev (GetAndSetP mem newv));
  effect(TEMP_DEF prev, TEMP tmp);

  predicate(UseZGC && !ZGenerational && n->as_LoadStore()->barrier_data() != 0);

  format %{ "GetAndSetP $prev, $mem, $newv" %}
  ins_encode %{
    Register prev = $prev$$Register;
    Register newv = $newv$$Register;
    Register addr = $mem$$Register;
    __ block_comment("xGetAndSetP");
    __ amswap_db_d(prev, newv, addr);
    x_load_barrier(_masm, this, Address(noreg, 0), prev, $tmp$$Register, barrier_data());
  %}

  ins_pipe(pipe_slow);
%}
